// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package core

import (
	"encoding/json"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/math"
)

var _ = (*initMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (i Init) MarshalJSON() ([]byte, error) {
	type Init struct {
		Admin           common.Address        `json:"admin,omitempty"`
		StakingContract common.Address        `json:"stakingContract,omitempty"`
		FirstLockPeriod *math.HexOrDecimal256 `json:"firstLockPeriod,omitempty"`
		ReleasePeriod   *math.HexOrDecimal256 `json:"releasePeriod,omitempty"`
		ReleaseCnt      *math.HexOrDecimal256 `json:"releaseCnt,omitempty"`
		TotalRewards    *math.HexOrDecimal256 `json:"totalRewards,omitempty"`
		RewardsPerBlock *math.HexOrDecimal256 `json:"rewardsPerBlock,omitempty"`
		Epoch           *math.HexOrDecimal256 `json:"epoch,omitempty"`
		RuEpoch         *math.HexOrDecimal256 `json:"ruEpoch,omitempty"`
		CommunityPool   common.Address        `json:"communityPool,omitempty"`
		BonusPool       common.Address        `json:"bonusPool,omitempty"`
		LockedAccounts  []LockedAccount       `json:"lockedAccounts,omitempty"`
	}
	var enc Init
	enc.Admin = i.Admin
	enc.StakingContract = i.StakingContract
	enc.FirstLockPeriod = (*math.HexOrDecimal256)(i.FirstLockPeriod)
	enc.ReleasePeriod = (*math.HexOrDecimal256)(i.ReleasePeriod)
	enc.ReleaseCnt = (*math.HexOrDecimal256)(i.ReleaseCnt)
	enc.TotalRewards = (*math.HexOrDecimal256)(i.TotalRewards)
	enc.RewardsPerBlock = (*math.HexOrDecimal256)(i.RewardsPerBlock)
	enc.Epoch = (*math.HexOrDecimal256)(i.Epoch)
	enc.RuEpoch = (*math.HexOrDecimal256)(i.RuEpoch)
	enc.CommunityPool = i.CommunityPool
	enc.BonusPool = i.BonusPool
	enc.LockedAccounts = i.LockedAccounts
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (i *Init) UnmarshalJSON(input []byte) error {
	type Init struct {
		Admin           *common.Address       `json:"admin,omitempty"`
		StakingContract *common.Address       `json:"stakingContract,omitempty"`
		FirstLockPeriod *math.HexOrDecimal256 `json:"firstLockPeriod,omitempty"`
		ReleasePeriod   *math.HexOrDecimal256 `json:"releasePeriod,omitempty"`
		ReleaseCnt      *math.HexOrDecimal256 `json:"releaseCnt,omitempty"`
		TotalRewards    *math.HexOrDecimal256 `json:"totalRewards,omitempty"`
		RewardsPerBlock *math.HexOrDecimal256 `json:"rewardsPerBlock,omitempty"`
		Epoch           *math.HexOrDecimal256 `json:"epoch,omitempty"`
		RuEpoch         *math.HexOrDecimal256 `json:"ruEpoch,omitempty"`
		CommunityPool   *common.Address       `json:"communityPool,omitempty"`
		BonusPool       *common.Address       `json:"bonusPool,omitempty"`
		LockedAccounts  []LockedAccount       `json:"lockedAccounts,omitempty"`
	}
	var dec Init
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Admin != nil {
		i.Admin = *dec.Admin
	}
	if dec.StakingContract != nil {
		i.StakingContract = *dec.StakingContract
	}
	if dec.FirstLockPeriod != nil {
		i.FirstLockPeriod = (*big.Int)(dec.FirstLockPeriod)
	}
	if dec.ReleasePeriod != nil {
		i.ReleasePeriod = (*big.Int)(dec.ReleasePeriod)
	}
	if dec.ReleaseCnt != nil {
		i.ReleaseCnt = (*big.Int)(dec.ReleaseCnt)
	}
	if dec.TotalRewards != nil {
		i.TotalRewards = (*big.Int)(dec.TotalRewards)
	}
	if dec.RewardsPerBlock != nil {
		i.RewardsPerBlock = (*big.Int)(dec.RewardsPerBlock)
	}
	if dec.Epoch != nil {
		i.Epoch = (*big.Int)(dec.Epoch)
	}
	if dec.RuEpoch != nil {
		i.RuEpoch = (*big.Int)(dec.RuEpoch)
	}
	if dec.CommunityPool != nil {
		i.CommunityPool = *dec.CommunityPool
	}
	if dec.BonusPool != nil {
		i.BonusPool = *dec.BonusPool
	}
	if dec.LockedAccounts != nil {
		i.LockedAccounts = dec.LockedAccounts
	}
	return nil
}
